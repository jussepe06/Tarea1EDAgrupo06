#include <iostream>
#include <list>
#include <vector>
#include <string>
#include <cctype>
#include <climits>

class HashTable {
private:
    int capacity;
    std::vector<std::list<std::pair<std::string, int>>> table;
    int elementos = 0;

    int hashFunction(const std::string& key) {
        int hashValue = 0;
        for (char ch : key) hashValue += ch;  // hash sencillo
        return hashValue % capacity;
    }

public:
    HashTable(int size) : capacity(size) {
        table.resize(capacity);
    }
    
    bool empty() const { return elementos == 0; }

    // Inserta o actualiza producto
    void insert(const std::string& key, int value) {
        int index = hashFunction(key);
        for (auto& pair : table[index]) {
            if (pair.first == key) {
                pair.second = value; // actualiza cantidad
                return;
            }
        }
        table[index].emplace_back(key, value); // nueva entrada
        ++elementos;
    }

    // Buscar cantidad del producto
    int search(const std::string& key) {
        int index = hashFunction(key);
        for (auto& pair : table[index]) {
            if (pair.first == key) {
                return pair.second;
            }
        }
        return -1; // no encontrado
    }

    // Eliminar producto
    void remove(const std::string& key) {
        int index = hashFunction(key);
        auto& bucket = table[index];
        for (auto it = bucket.begin(); it != bucket.end(); ++it) {
            if (it->first == key) {
                bucket.erase(it);
                --elementos;
                std::cout << "Producto '" << key << "' eliminado.\n";
                return;
            }
        }
        std::cout << "El producto '" << key << "' no existe en el inventario.\n";
    }

    // Mostrar inventario
    void display() {
        if(empty()) {
            std::cout << "No hay elementos en tabla." << std::endl;
            return;
        }
        
        for (int i = 0; i < capacity; ++i) {
            const auto& tabla = table[i];
            if(tabla.empty()) continue;
            
            std::cout << "Elemento " << i << ":\n";
            for (const auto& pair : table[i]) {
                std::cout << "{" << pair.first << ": " << pair.second << "} ";
    		    std::cout << std::endl;
            }
        }

    }
};

int main() {
    HashTable inventario(17); // capacidad base

    while (true) {
        std::cout << "\n=== Sistema de Inventario ===\n";
        std::cout << "a) Agregar producto (nombre y cantidad)\n";
        std::cout << "b) Buscar cantidad de producto\n";
        std::cout << "c) Eliminar producto\n";
        std::cout << "d) Mostrar inventario\n";
        std::cout << "e) Salir\n";
        std::cout << "Elige una opcion: ";

        std::string op;
        if (!std::getline(std::cin, op)) break;
        if (!op.empty()) op[0] = (char)tolower(op[0]);

        if (op == "a") {
            // --- Agregar producto ---
            std::string nombre;
            std::cout << "Nombre del producto: ";
            if (!std::getline(std::cin, nombre) || nombre.empty()) {
                std::cout << "Nombre invalido.\n";
                continue;
            }

            std::string s;
            std::cout << "Cantidad (entero >= 0): ";
            if (!std::getline(std::cin, s)) { 
                std::cout << "Entrada invalida.\n"; 
                continue; 
            }

            try {
                size_t pos = 0;
                long long v = std::stoll(s, &pos, 10);
                if (pos != s.size() || v < 0 || v > INT32_MAX) {
                    std::cout << "Cantidad invalida.\n";
                    continue;
                }
                inventario.insert(nombre, (int)v);
                std::cout << "Producto '" << nombre << "' agregado/actualizado con cantidad " << v << ".\n";
            } catch (...) {
                std::cout << "Cantidad invalida.\n";
                continue;
            }

        } else if (op == "b") {
            // --- Buscar cantidad ---
            std::string nombre;
            std::cout << "Nombre del producto a buscar: ";
            if (!std::getline(std::cin, nombre) || nombre.empty()) {
                std::cout << "Nombre invalido.\n";
                continue;
            }

            int cantidad = inventario.search(nombre);
            if (cantidad == -1) {
                std::cout << "El producto '" << nombre << "' no se encuentra en el inventario.\n";
            } else {
                std::cout << "El producto '" << nombre << "' tiene cantidad: " << cantidad << ".\n";
            }

        } else if (op == "c") {
            // --- Eliminar producto ---
            std::string nombre;
            std::cout << "Nombre del producto a eliminar: ";
            if (!std::getline(std::cin, nombre) || nombre.empty()) {
                std::cout << "Nombre invalido.\n";
                continue;
            }
            inventario.remove(nombre);

        } else if (op == "d") {
            // --- Mostrar inventario ---
            std::cout << "--- Mostrar inventario ---\n";
            inventario.display();

        } else if (op == "e" || op == "salir" || op == "exit") {
            std::cout << "Saliendo...\n";
            break;

        } else {
            std::cout << "Opcion no valida. Solo 'a', 'b', 'c', 'd' o 'e'.\n";
        }
    }

    return 0;
}
